Settings:
  Output files: "diatom_genome.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ../../raw_data/diatom_genome/GCA_014885115.2_ASM1488511v2_genomic.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 12469579 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 12469579 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.10841e+07 (target: 12469578)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 6
Getting block 4 of 6
Getting block 2 of 6
Getting block 3 of 6
Getting block 6 of 6
  Reserving size (12469579) for bucket 3
Getting block 5 of 6
  Reserving size (12469579) for bucket 1
  Reserving size (12469579) for bucket 6
  Reserving size (12469579) for bucket 5
  Reserving size (12469579) for bucket 4
  Reserving size (12469579) for bucket 2
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  Calculating Z arrays for bucket 2
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 6:
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 4:
  Entering block accumulator loop for bucket 1:
  bucket 3: 10%
  bucket 6: 10%
  bucket 2: 10%
  bucket 1: 10%
  bucket 3: 20%
  bucket 6: 20%
  bucket 4: 10%
  bucket 5: 10%
  bucket 2: 20%
  bucket 1: 20%
  bucket 3: 30%
  bucket 6: 30%
  bucket 2: 30%
  bucket 3: 40%
  bucket 6: 40%
  bucket 4: 20%
  bucket 1: 30%
  bucket 5: 20%
  bucket 3: 50%
  bucket 6: 50%
  bucket 2: 40%
  bucket 1: 40%
  bucket 3: 60%
  bucket 6: 60%
  bucket 4: 30%
  bucket 5: 30%
  bucket 2: 50%
  bucket 3: 70%
  bucket 1: 50%
  bucket 6: 70%
  bucket 2: 60%
  bucket 3: 80%
  bucket 6: 80%
  bucket 4: 40%
  bucket 1: 60%
  bucket 5: 40%
  bucket 3: 90%
  bucket 6: 90%
  bucket 2: 70%
  bucket 1: 70%
  bucket 3: 100%
  Sorting block of length 12326510 for bucket 3
  (Using difference cover)
  bucket 6: 100%
  Sorting block of length 12100753 for bucket 6
  (Using difference cover)
  bucket 4: 50%
  bucket 2: 80%
  bucket 5: 50%
  bucket 1: 80%
  bucket 2: 90%
  bucket 4: 60%
  bucket 2: 100%
  Sorting block of length 11554400 for bucket 2
  (Using difference cover)
  bucket 1: 90%
  bucket 5: 60%
  bucket 4: 70%
  bucket 1: 100%
  Sorting block of length 11558242 for bucket 1
  (Using difference cover)
  bucket 5: 70%
  bucket 4: 80%
  bucket 5: 80%
  bucket 5: 90%
  bucket 4: 90%
  bucket 5: 100%
  Sorting block of length 7671269 for bucket 5
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 11293244 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 7671270 for bucket 5
  Sorting block time: 00:00:02
Returning block of 12326511 for bucket 3
  Sorting block time: 00:00:02
Returning block of 12100754 for bucket 6
  Sorting block time: 00:00:02
Returning block of 11554401 for bucket 2
  Sorting block time: 00:00:02
Returning block of 11558243 for bucket 1
  Sorting block time: 00:00:02
Returning block of 11293245 for bucket 4
Exited GFM loop
fchr[A]: 0
fchr[C]: 19964541
fchr[G]: 33237827
fchr[T]: 46531224
fchr[$]: 66504423
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 27238777 bytes to primary GFM file: diatom_genome.1.ht2
Wrote 16626112 bytes to secondary GFM file: diatom_genome.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 77677595 bytes to primary GFM file: diatom_genome.5.ht2
Wrote 16669384 bytes to secondary GFM file: diatom_genome.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 66504423
    gbwtLen: 66504424
    nodes: 66504424
    sz: 16626106
    gbwtSz: 16626107
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 4156527
    offsSz: 16626108
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 346378
    numLines: 346378
    gbwtTotLen: 22168192
    gbwtTotSz: 22168192
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:02:30
